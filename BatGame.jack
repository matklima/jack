class BatGame {

    // The bat
    field Bat bat;

    // The ball
    field Ball ball;

    // The bat's movement direction
    field int direction; // 3=left,4=right

    // The current wall that the ball is bouncing from.
    field int wall;

    // True when the game is over
    field boolean exit;

    // The current score.
    field int score;

    // The last wall that the ball bounced from.
    field int lastWall;

    /** Constructs a new Square Game. */
    constructor BatGame new() {
        let bat = Bat.new(230, 229, 50, 7);
        let direction = 0;
        
        let ball = Ball.new(253, 222, 0, 511, 0, 229);
	    do ball.setDestination(400,0);
        
        do Screen.drawRectangle(0, 238, 511, 240);
	    do Output.moveCursor(22,0);
	    do Output.printString("Player Score: 0");
        do Output.moveCursor(22,50);
        do Output.printString("PC Score: 0");
        let exit = false;
        let score = 0;
        let wall = 0;
        let lastWall = 0;
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do bat.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Starts the game. Handles inputs from the user that control
     *  the bats's movement direction. */
    method void run() {
        var char key;
        var boolean exit;

        let exit = false;

        while (~exit) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveBat();
                do moveBall();
            }

            if (key = 81) {
                let exit = true;
            }
            if (key = 130) {
                let direction = 3;
            }
            if (key = 132) {
                let direction = 4;
            }

            // waits for the key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveBat();
                do moveBall();
            }
        }
            
        return;
	}

    /** Moves the bat by one step. */
    method void moveBat() {
        if (direction = 3) {
            do bat.moveLeft();
        }
        if (direction = 4) {
            do bat.moveRight();
        }

        do Sys.wait(5); // Delays the next movement.
        return;
    }

        /**
     * Handles ball movement, including bouncing.
     * If the ball bounces from the wall, finds its new direction.
     * If the ball bounces from the bat, shrinks the bat's size and
     * increases the score by one.
     */
    method void moveBall() {
	var int bouncingDirection, batLeft, batRight, ballLeft, ballRight;

	let wall = ball.move();

	if ((wall > 0) & (~(wall = lastWall))) {
	    let lastWall = wall;
	    let bouncingDirection = 0;
	    let batLeft = bat.moveLeft();
	    let batRight = bat.moveRight();
	    let ballLeft = ball.getLeft();
	    let ballRight = ball.getRight();
	
	    if (wall = 4) {
		let exit = (batLeft > ballRight) | (batRight < ballLeft);
	        if (~exit) {
		    if (ballRight < (batLeft + 10)) {
			let bouncingDirection = -1;
		    }
		    else {
			if (ballLeft > (batRight - 10)) {
			    let bouncingDirection = 1;
			}
		    }

  		    let score = score + 1;
		    do Output.moveCursor(22,7);
		    do Output.printInt(score);
		}
	    }

  	    do ball.bounce(bouncingDirection);
	}

	return;
    }
}
